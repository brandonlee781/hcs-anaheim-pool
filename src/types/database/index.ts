/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/events": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          time?: parameters["rowFilter.events.time"];
          duration?: parameters["rowFilter.events.duration"];
          data?: parameters["rowFilter.events.data"];
          day?: parameters["rowFilter.events.day"];
          created_at?: parameters["rowFilter.events.created_at"];
          streams?: parameters["rowFilter.events.streams"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["events"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** events */
          events?: definitions["events"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          time?: parameters["rowFilter.events.time"];
          duration?: parameters["rowFilter.events.duration"];
          data?: parameters["rowFilter.events.data"];
          day?: parameters["rowFilter.events.day"];
          created_at?: parameters["rowFilter.events.created_at"];
          streams?: parameters["rowFilter.events.streams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          time?: parameters["rowFilter.events.time"];
          duration?: parameters["rowFilter.events.duration"];
          data?: parameters["rowFilter.events.data"];
          day?: parameters["rowFilter.events.day"];
          created_at?: parameters["rowFilter.events.created_at"];
          streams?: parameters["rowFilter.events.streams"];
        };
        body: {
          /** events */
          events?: definitions["events"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tournament": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament.id"];
          title?: parameters["rowFilter.tournament.title"];
          liquipediaLink?: parameters["rowFilter.tournament.liquipediaLink"];
          timezone?: parameters["rowFilter.tournament.timezone"];
          created_at?: parameters["rowFilter.tournament.created_at"];
          /** Flag to determine if tournament is in the past */
          isPast?: parameters["rowFilter.tournament.isPast"];
          location?: parameters["rowFilter.tournament.location"];
          prizePool?: parameters["rowFilter.tournament.prizePool"];
          isOnline?: parameters["rowFilter.tournament.isOnline"];
          startDate?: parameters["rowFilter.tournament.startDate"];
          endDate?: parameters["rowFilter.tournament.endDate"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tournament"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tournament */
          tournament?: definitions["tournament"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament.id"];
          title?: parameters["rowFilter.tournament.title"];
          liquipediaLink?: parameters["rowFilter.tournament.liquipediaLink"];
          timezone?: parameters["rowFilter.tournament.timezone"];
          created_at?: parameters["rowFilter.tournament.created_at"];
          /** Flag to determine if tournament is in the past */
          isPast?: parameters["rowFilter.tournament.isPast"];
          location?: parameters["rowFilter.tournament.location"];
          prizePool?: parameters["rowFilter.tournament.prizePool"];
          isOnline?: parameters["rowFilter.tournament.isOnline"];
          startDate?: parameters["rowFilter.tournament.startDate"];
          endDate?: parameters["rowFilter.tournament.endDate"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament.id"];
          title?: parameters["rowFilter.tournament.title"];
          liquipediaLink?: parameters["rowFilter.tournament.liquipediaLink"];
          timezone?: parameters["rowFilter.tournament.timezone"];
          created_at?: parameters["rowFilter.tournament.created_at"];
          /** Flag to determine if tournament is in the past */
          isPast?: parameters["rowFilter.tournament.isPast"];
          location?: parameters["rowFilter.tournament.location"];
          prizePool?: parameters["rowFilter.tournament.prizePool"];
          isOnline?: parameters["rowFilter.tournament.isOnline"];
          startDate?: parameters["rowFilter.tournament.startDate"];
          endDate?: parameters["rowFilter.tournament.endDate"];
        };
        body: {
          /** tournament */
          tournament?: definitions["tournament"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tournament-day": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament-day.id"];
          name?: parameters["rowFilter.tournament-day.name"];
          date?: parameters["rowFilter.tournament-day.date"];
          include?: parameters["rowFilter.tournament-day.include"];
          created_at?: parameters["rowFilter.tournament-day.created_at"];
          tournament?: parameters["rowFilter.tournament-day.tournament"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tournament-day"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tournament-day */
          "tournament-day"?: definitions["tournament-day"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament-day.id"];
          name?: parameters["rowFilter.tournament-day.name"];
          date?: parameters["rowFilter.tournament-day.date"];
          include?: parameters["rowFilter.tournament-day.include"];
          created_at?: parameters["rowFilter.tournament-day.created_at"];
          tournament?: parameters["rowFilter.tournament-day.tournament"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament-day.id"];
          name?: parameters["rowFilter.tournament-day.name"];
          date?: parameters["rowFilter.tournament-day.date"];
          include?: parameters["rowFilter.tournament-day.include"];
          created_at?: parameters["rowFilter.tournament-day.created_at"];
          tournament?: parameters["rowFilter.tournament-day.tournament"];
        };
        body: {
          /** tournament-day */
          "tournament-day"?: definitions["tournament-day"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/teams": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teams.id"];
          name?: parameters["rowFilter.teams.name"];
          color?: parameters["rowFilter.teams.color"];
          region?: parameters["rowFilter.teams.region"];
          image?: parameters["rowFilter.teams.image"];
          created_at?: parameters["rowFilter.teams.created_at"];
          /** Optional color used for other uses */
          "secondary-color"?: parameters["rowFilter.teams.secondary-color"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["teams"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** teams */
          teams?: definitions["teams"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teams.id"];
          name?: parameters["rowFilter.teams.name"];
          color?: parameters["rowFilter.teams.color"];
          region?: parameters["rowFilter.teams.region"];
          image?: parameters["rowFilter.teams.image"];
          created_at?: parameters["rowFilter.teams.created_at"];
          /** Optional color used for other uses */
          "secondary-color"?: parameters["rowFilter.teams.secondary-color"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teams.id"];
          name?: parameters["rowFilter.teams.name"];
          color?: parameters["rowFilter.teams.color"];
          region?: parameters["rowFilter.teams.region"];
          image?: parameters["rowFilter.teams.image"];
          created_at?: parameters["rowFilter.teams.created_at"];
          /** Optional color used for other uses */
          "secondary-color"?: parameters["rowFilter.teams.secondary-color"];
        };
        body: {
          /** teams */
          teams?: definitions["teams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tournament-day-to-streams": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament-day-to-streams.id"];
          day?: parameters["rowFilter.tournament-day-to-streams.day"];
          stream?: parameters["rowFilter.tournament-day-to-streams.stream"];
          created_at?: parameters["rowFilter.tournament-day-to-streams.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tournament-day-to-streams"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tournament-day-to-streams */
          "tournament-day-to-streams"?: definitions["tournament-day-to-streams"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament-day-to-streams.id"];
          day?: parameters["rowFilter.tournament-day-to-streams.day"];
          stream?: parameters["rowFilter.tournament-day-to-streams.stream"];
          created_at?: parameters["rowFilter.tournament-day-to-streams.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament-day-to-streams.id"];
          day?: parameters["rowFilter.tournament-day-to-streams.day"];
          stream?: parameters["rowFilter.tournament-day-to-streams.stream"];
          created_at?: parameters["rowFilter.tournament-day-to-streams.created_at"];
        };
        body: {
          /** tournament-day-to-streams */
          "tournament-day-to-streams"?: definitions["tournament-day-to-streams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/streams": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.streams.id"];
          name?: parameters["rowFilter.streams.name"];
          link?: parameters["rowFilter.streams.link"];
          created_at?: parameters["rowFilter.streams.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["streams"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** streams */
          streams?: definitions["streams"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.streams.id"];
          name?: parameters["rowFilter.streams.name"];
          link?: parameters["rowFilter.streams.link"];
          created_at?: parameters["rowFilter.streams.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.streams.id"];
          name?: parameters["rowFilter.streams.name"];
          link?: parameters["rowFilter.streams.link"];
          created_at?: parameters["rowFilter.streams.created_at"];
        };
        body: {
          /** streams */
          streams?: definitions["streams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/pools": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pools.id"];
          name?: parameters["rowFilter.pools.name"];
          teams?: parameters["rowFilter.pools.teams"];
          tournament?: parameters["rowFilter.pools.tournament"];
          created_at?: parameters["rowFilter.pools.created_at"];
          /** Key used to select the pool. Used in tournament-day include array */
          key?: parameters["rowFilter.pools.key"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pools"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pools */
          pools?: definitions["pools"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pools.id"];
          name?: parameters["rowFilter.pools.name"];
          teams?: parameters["rowFilter.pools.teams"];
          tournament?: parameters["rowFilter.pools.tournament"];
          created_at?: parameters["rowFilter.pools.created_at"];
          /** Key used to select the pool. Used in tournament-day include array */
          key?: parameters["rowFilter.pools.key"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pools.id"];
          name?: parameters["rowFilter.pools.name"];
          teams?: parameters["rowFilter.pools.teams"];
          tournament?: parameters["rowFilter.pools.tournament"];
          created_at?: parameters["rowFilter.pools.created_at"];
          /** Key used to select the pool. Used in tournament-day include array */
          key?: parameters["rowFilter.pools.key"];
        };
        body: {
          /** pools */
          pools?: definitions["pools"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description Event data */
  events: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: time without time zone */
    time: string;
    /** Format: bigint */
    duration: number;
    /** Format: json */
    data?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tournament-day.id`.<fk table='tournament-day' column='id'/>
     */
    day?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: ARRAY */
    streams?: unknown[];
  };
  tournament: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    title: string;
    /** Format: character varying */
    liquipediaLink?: string;
    /** Format: character varying */
    timezone?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: boolean
     * @description Flag to determine if tournament is in the past
     * @default true
     */
    isPast: boolean;
    /** Format: character varying */
    location?: string;
    /** Format: double precision */
    prizePool?: number;
    /** Format: boolean */
    isOnline?: boolean;
    /** Format: date */
    startDate: string;
    /** Format: date */
    endDate: string;
  };
  /** @description Tournament Schedule data */
  "tournament-day": {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /** Format: date */
    date: string;
    /** Format: ARRAY */
    include?: unknown[];
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tournament.id`.<fk table='tournament' column='id'/>
     */
    tournament?: string;
  };
  teams: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: character varying */
    name: string;
    /** Format: character varying */
    color: string;
    /** Format: character varying */
    region?: string;
    /** Format: uuid */
    image?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: character varying
     * @description Optional color used for other uses
     */
    "secondary-color"?: string;
  };
  /** @description Join table between tournament-day and streams */
  "tournament-day-to-streams": {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tournament-day.id`.<fk table='tournament-day' column='id'/>
     */
    day?: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `streams.id`.<fk table='streams' column='id'/>
     */
    stream?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  /** @description Twitch Stream Data */
  streams: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: character varying */
    name?: string;
    /** Format: character varying */
    link?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  pools: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /** Format: ARRAY */
    teams?: unknown[];
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tournament.id`.<fk table='tournament' column='id'/>
     */
    tournament?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: character varying
     * @description Key used to select the pool. Used in tournament-day include array
     */
    key: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description events */
  "body.events": definitions["events"];
  /** Format: uuid */
  "rowFilter.events.id": string;
  /** Format: time without time zone */
  "rowFilter.events.time": string;
  /** Format: bigint */
  "rowFilter.events.duration": string;
  /** Format: json */
  "rowFilter.events.data": string;
  /** Format: uuid */
  "rowFilter.events.day": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.created_at": string;
  /** Format: ARRAY */
  "rowFilter.events.streams": string;
  /** @description tournament */
  "body.tournament": definitions["tournament"];
  /** Format: uuid */
  "rowFilter.tournament.id": string;
  /** Format: character varying */
  "rowFilter.tournament.title": string;
  /** Format: character varying */
  "rowFilter.tournament.liquipediaLink": string;
  /** Format: character varying */
  "rowFilter.tournament.timezone": string;
  /** Format: timestamp with time zone */
  "rowFilter.tournament.created_at": string;
  /**
   * Format: boolean
   * @description Flag to determine if tournament is in the past
   */
  "rowFilter.tournament.isPast": string;
  /** Format: character varying */
  "rowFilter.tournament.location": string;
  /** Format: double precision */
  "rowFilter.tournament.prizePool": string;
  /** Format: boolean */
  "rowFilter.tournament.isOnline": string;
  /** Format: date */
  "rowFilter.tournament.startDate": string;
  /** Format: date */
  "rowFilter.tournament.endDate": string;
  /** @description tournament-day */
  "body.tournament-day": definitions["tournament-day"];
  /** Format: uuid */
  "rowFilter.tournament-day.id": string;
  /** Format: character varying */
  "rowFilter.tournament-day.name": string;
  /** Format: date */
  "rowFilter.tournament-day.date": string;
  /** Format: ARRAY */
  "rowFilter.tournament-day.include": string;
  /** Format: timestamp with time zone */
  "rowFilter.tournament-day.created_at": string;
  /** Format: uuid */
  "rowFilter.tournament-day.tournament": string;
  /** @description teams */
  "body.teams": definitions["teams"];
  /** Format: character varying */
  "rowFilter.teams.id": string;
  /** Format: character varying */
  "rowFilter.teams.name": string;
  /** Format: character varying */
  "rowFilter.teams.color": string;
  /** Format: character varying */
  "rowFilter.teams.region": string;
  /** Format: uuid */
  "rowFilter.teams.image": string;
  /** Format: timestamp with time zone */
  "rowFilter.teams.created_at": string;
  /**
   * Format: character varying
   * @description Optional color used for other uses
   */
  "rowFilter.teams.secondary-color": string;
  /** @description tournament-day-to-streams */
  "body.tournament-day-to-streams": definitions["tournament-day-to-streams"];
  /** Format: uuid */
  "rowFilter.tournament-day-to-streams.id": string;
  /** Format: uuid */
  "rowFilter.tournament-day-to-streams.day": string;
  /** Format: character varying */
  "rowFilter.tournament-day-to-streams.stream": string;
  /** Format: timestamp with time zone */
  "rowFilter.tournament-day-to-streams.created_at": string;
  /** @description streams */
  "body.streams": definitions["streams"];
  /** Format: character varying */
  "rowFilter.streams.id": string;
  /** Format: character varying */
  "rowFilter.streams.name": string;
  /** Format: character varying */
  "rowFilter.streams.link": string;
  /** Format: timestamp with time zone */
  "rowFilter.streams.created_at": string;
  /** @description pools */
  "body.pools": definitions["pools"];
  /** Format: uuid */
  "rowFilter.pools.id": string;
  /** Format: character varying */
  "rowFilter.pools.name": string;
  /** Format: ARRAY */
  "rowFilter.pools.teams": string;
  /** Format: uuid */
  "rowFilter.pools.tournament": string;
  /** Format: timestamp with time zone */
  "rowFilter.pools.created_at": string;
  /**
   * Format: character varying
   * @description Key used to select the pool. Used in tournament-day include array
   */
  "rowFilter.pools.key": string;
}

export interface operations {}

export interface external {}
